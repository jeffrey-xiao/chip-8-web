(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./src/styles.scss":
/*!******************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/dist/cjs.js!./src/styles.scss ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.push([module.i, \"@import url(https://fonts.googleapis.com/css?family=Inconsolata);\", \"\"]);\nexports.push([module.i, \"@import url(https://fonts.googleapis.com/css?family=Josefin+Slab);\", \"\"]);\n\n// module\nexports.push([module.i, \"@charset \\\"UTF-8\\\";\\nhtml,\\nbutton,\\nselect {\\n  font-family: \\\"Inconsolata\\\", monospace;\\n  color: #1b2228; }\\n\\nbutton {\\n  box-sizing: border-box;\\n  border: 1px solid #a72e2b;\\n  border-radius: 3px;\\n  box-shadow: inset inset 0 0 0 1px #dae4ed;\\n  padding: 5px 20px;\\n  font-size: 18px;\\n  text-transform: uppercase;\\n  color: #a72e2b;\\n  background: #fff;\\n  transition: 50ms background; }\\n  button:hover {\\n    box-sizing: border-box;\\n    border: 1px solid #a72e2b;\\n    background: #a72e2b;\\n    color: #fff;\\n    cursor: pointer; }\\n  button:disabled {\\n    cursor: auto;\\n    color: #758aa0;\\n    box-sizing: border-box;\\n    border: 1px solid #dae4ed; }\\n    button:disabled:hover {\\n      box-sizing: border-box;\\n      border: 1px solid #dae4ed;\\n      background: #fff;\\n      cursor: auto; }\\n\\nselect {\\n  box-sizing: border-box;\\n  border: 1px solid #a72e2b;\\n  border-radius: 3px;\\n  font-size: 18px;\\n  text-transform: uppercase;\\n  padding: 3.8px;\\n  padding-right: 20px;\\n  color: #a72e2b;\\n  background-color: #f2cdcc;\\n  -webkit-appearance: none;\\n  -moz-appearance: none;\\n  appearance: none; }\\n\\na.styled-link {\\n  text-decoration: underline;\\n  color: #6a1d1b;\\n  padding-right: 2px;\\n  transition: all 0.5s;\\n  display: inline-block; }\\n  a.styled-link:hover {\\n    background-color: rgba(106, 29, 27, 0.1); }\\n\\n.styled-select {\\n  position: relative; }\\n\\n.styled-select:before {\\n  content: '\\\\25BC';\\n  font-family: FontAwesome;\\n  color: #a72e2b;\\n  box-sizing: border-box;\\n  border-left: 1px solid #a72e2b;\\n  display: inline-block;\\n  position: absolute;\\n  right: 1px;\\n  top: -7px;\\n  padding-top: 2px;\\n  padding-bottom: 4px;\\n  pointer-events: none; }\\n\\n#header {\\n  text-align: center;\\n  display: inline-block;\\n  position: relative;\\n  margin-left: 50%;\\n  margin-bottom: 25px;\\n  -webkit-transform: translateX(-50%);\\n  -moz-transform: translateX(-50%);\\n  -ms-transform: translateX(-50%);\\n  -o-transform: translateX(-50%);\\n  transform: translateX(-50%);\\n  font-family: \\\"Josefin Slab\\\", serif;\\n  font-size: 60px;\\n  padding: 30px 20px 25px 20px;\\n  box-sizing: border-box;\\n  border-bottom: 3px solid #6a1d1b; }\\n\\n#description {\\n  font-size: 20px;\\n  text-align: justify;\\n  width: 600px;\\n  margin-left: 50%;\\n  margin-bottom: 40px;\\n  -webkit-transform: translateX(-50%);\\n  -moz-transform: translateX(-50%);\\n  -ms-transform: translateX(-50%);\\n  -o-transform: translateX(-50%);\\n  transform: translateX(-50%);\\n  position: relative; }\\n\\n#menu-buttons {\\n  text-align: center;\\n  position: relative; }\\n\\n#display {\\n  width: 80%;\\n  margin-left: 50%;\\n  margin-bottom: 25px;\\n  overflow: hidden;\\n  position: relative;\\n  -webkit-transform: translateX(-50%);\\n  -moz-transform: translateX(-50%);\\n  -ms-transform: translateX(-50%);\\n  -o-transform: translateX(-50%);\\n  transform: translateX(-50%); }\\n\\n#chipo-canvas-wrapper {\\n  width: 80%;\\n  float: left;\\n  padding: 5px; }\\n  #chipo-canvas-wrapper #chipo-canvas {\\n    box-sizing: border-box;\\n    border: 2px solid #dae4ed;\\n    box-shadow: inset inset 0 0 0 1px #dae4ed;\\n    border-radius: 7px;\\n    position: relative;\\n    top: 50%;\\n    margin-left: 50%;\\n    -webkit-transform: translate(-50%, -50%);\\n    -moz-transform: translate(-50%, -50%);\\n    -ms-transform: translate(-50%, -50%);\\n    -o-transform: translate(-50%, -50%);\\n    transform: translate(-50%, -50%); }\\n\\n#debug-display {\\n  float: right;\\n  width: 20%;\\n  height: 100%;\\n  position: absolute;\\n  display: inline-block; }\\n  #debug-display #registers-wrapper {\\n    width: calc(100% - 5px);\\n    height: 50%;\\n    position: relative;\\n    box-sizing: border-box;\\n    padding: 5px; }\\n    #debug-display #registers-wrapper #registers-card {\\n      width: 100%;\\n      height: 100%;\\n      position: relative;\\n      box-sizing: border-box;\\n      border: 2px solid #dae4ed;\\n      box-shadow: inset inset 0 0 0 1px #dae4ed;\\n      border-radius: 7px; }\\n      #debug-display #registers-wrapper #registers-card #registers {\\n        top: 50%;\\n        margin-left: 50%;\\n        -webkit-transform: translate(-50%, -50%);\\n        -moz-transform: translate(-50%, -50%);\\n        -ms-transform: translate(-50%, -50%);\\n        -o-transform: translate(-50%, -50%);\\n        transform: translate(-50%, -50%);\\n        position: absolute;\\n        display: inline-grid;\\n        grid-template-columns: 50% 50%; }\\n        #debug-display #registers-wrapper #registers-card #registers .register {\\n          margin: 0px;\\n          font-family: \\\"Inconsolata\\\", monospace;\\n          white-space: pre;\\n          font-size: 20px;\\n          padding: 2px 20px; }\\n  #debug-display #assembly-code-wrapper {\\n    width: calc(100% - 5px);\\n    height: 50%;\\n    position: relative;\\n    box-sizing: border-box;\\n    padding: 5px; }\\n    #debug-display #assembly-code-wrapper #assembly-code {\\n      width: 100%;\\n      height: 100%;\\n      box-sizing: border-box;\\n      border: 2px solid #dae4ed;\\n      box-shadow: inset inset 0 0 0 1px #dae4ed;\\n      border-radius: 7px;\\n      display: inline-block;\\n      overflow-y: scroll;\\n      padding: 5px; }\\n      #debug-display #assembly-code-wrapper #assembly-code .assembly-line {\\n        margin: 0px;\\n        font-family: \\\"Inconsolata\\\", monospace;\\n        font-size: 20px;\\n        padding-left: 15px; }\\n\\n@media all and (max-width: 1690px) {\\n  .register {\\n    font-size: 16px !important;\\n    padding: 2px 14px !important; }\\n  .assembly-line {\\n    font-size: 16px !important;\\n    padding-left: 10px !important; } }\\n\\n@media all and (max-width: 1280px) {\\n  #display {\\n    width: 90%; }\\n  .register {\\n    font-size: 14px !important;\\n    padding: 0px 6px !important; }\\n  .assembly-line {\\n    font-size: 14px !important;\\n    padding-left: 5px !important; } }\\n\\n@media all and (max-width: 980px) {\\n  #display {\\n    width: 100%; }\\n  .register {\\n    font-size: 11px !important;\\n    padding: 0px 5px !important; }\\n  .assembly-line {\\n    font-size: 11px !important;\\n    padding-left: 0px !important; } }\\n\", \"\"]);\n\n// exports\n\n\n//# sourceURL=webpack:///./src/styles.scss?./node_modules/css-loader!./node_modules/sass-loader/dist/cjs.js");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var chipo_chipo_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chipo/chipo_bg */ \"./node_modules/chipo/chipo_bg.wasm\");\n/* harmony import */ var chipo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chipo */ \"./node_modules/chipo/chipo.js\");\n/* harmony import */ var _styles_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./styles.scss */ \"./src/styles.scss\");\n/* harmony import */ var _styles_scss__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_styles_scss__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst chip8 = chipo__WEBPACK_IMPORTED_MODULE_1__[\"Chip8\"].new();\nconst beepSfx = new Audio('./assets/beep.mp3');\nconst CYCLES_PER_FRAME = 20;\nconst MAX_SCREEN_WIDTH = 128;\nconst MAX_SCREEN_HEIGHT = 64;\nconst REGISTER_COUNT = 18;\nconst ROMS = [\n  '15PUZZLE',\n  'ALIEN',\n  'ANT',\n  'BLINKY',\n  'BLITZ',\n  'BRIX',\n  'CAR',\n  'CONNECT4',\n  'FIELD',\n  'GUESS',\n  'HIDDEN',\n  'INVADERS',\n  'JOUST',\n  'KALEID',\n  'MAZE',\n  'MERLIN',\n  'MISSILE',\n  'PIPER',\n  'PONG',\n  'PONG2',\n  'PUZZLE',\n  'RACE',\n  'SPACEFIG',\n  'SYZYGY',\n  'TANK',\n  'TETRIS',\n  'TICTAC',\n  'UBOAT',\n  'UFO',\n  'VBRIX',\n  'VERS',\n  'WIPEOFF',\n  'WORM3',\n];\n\nconst canvasWrapper = document.getElementById('chipo-canvas-wrapper');\nconst canvas = document.getElementById('chipo-canvas');\nconst ctx = canvas.getContext('2d');\n\nconst adjustSizes = () => {\n  canvasWrapper.style.height = `${canvasWrapper.offsetWidth / 2}px`;\n  canvas.width = Math.floor((canvasWrapper.offsetWidth - 10) / MAX_SCREEN_WIDTH) * MAX_SCREEN_WIDTH;\n  canvas.height = canvas.width / 2;\n};\n\nwindow.addEventListener('resize', adjustSizes);\nadjustSizes();\n\nlet isRunning = false;\nlet currRomName;\n\n// Handle keyboard input\n// 123C => 1234\n// 456D => QWER\n// 789E => ASDF\n// A0BF => ZXCV\nconst KEYS = [88, 49, 50, 51, 81, 87, 69, 65, 83, 68, 90, 67, 52, 82, 70, 86];\n\ndocument.addEventListener('keydown', (event) => {\n  const index = KEYS.indexOf(event.keyCode);\n  if (index !== -1) {\n    chip8.press_key(index);\n  }\n});\n\ndocument.addEventListener('keyup', (event) => {\n  const index = KEYS.indexOf(event.keyCode);\n  if (index !== -1) {\n    chip8.release_key(index);\n  }\n});\n\n// Sound\nconst playBeep = () => {\n  beepSfx.play();\n};\n\n// User Interface\nconst registers = [];\nfor (let i = 0; i < REGISTER_COUNT; i += 1) {\n  const registerContainer = document.getElementById('registers');\n  const register = document.createElement('div');\n  register.className = 'register';\n  registerContainer.appendChild(register);\n  registers.push(register);\n}\nconst assemblyCode = document.getElementById('assembly-code');\nconst assemblyLines = [];\n\nconst disassembleMachineCode = (machineCode, isEven) => {\n  while (assemblyLines.firstChild) {\n    assemblyLines.removeChild(assemblyCode.firstChild);\n  }\n\n  for (let i = isEven ? 0 : 1; i < machineCode.length - 1; i += 2) {\n    const programCounter = 0x200 + i;\n    const assemblyLine = document.createElement('pre');\n    assemblyLine.className = 'assembly-line';\n    assemblyLine.innerText = `${` ${programCounter}`.slice(-4)}: `;\n\n    const opcode = (machineCode[i] << 8) + machineCode[i + 1];\n\n    const t1 = (opcode & 0xf000) >> 12;\n    const t2 = (opcode & 0x0f00) >> 8;\n    const t3 = (opcode & 0x00f0) >> 4;\n    const t4 = opcode & 0x000f;\n\n    const x = t1;\n    const y = t2;\n    const nnn = opcode & 0x0fff;\n    const kk = opcode & 0x00ff;\n    const n = opcode & 0x000f;\n\n    if (t1 === 0x0 && t2 === 0x0 && t3 === 0xc) assemblyLine.innerText += `SCD ${n}`;\n    else if (opcode === 0x00e0) assemblyLine.innerText += 'CLS';\n    else if (opcode === 0x00ee) assemblyLine.innerText += 'RET';\n    else if (opcode === 0x00fb) assemblyLine.innerText += 'SCR';\n    else if (opcode === 0x00fc) assemblyLine.innerText += 'SCL';\n    else if (opcode === 0x00fd) assemblyLine.innerText += 'EXIT';\n    else if (opcode === 0x00fe) assemblyLine.innerText += 'LOW';\n    else if (opcode === 0x00ff) assemblyLine.innerText += 'HIGH';\n    else if (t1 === 0x1) assemblyLine.innerText += `JP ${nnn}`;\n    else if (t1 === 0x2) assemblyLine.innerText += `CALL ${nnn}`;\n    else if (t1 === 0x3) assemblyLine.innerText += `SE V${x}, ${kk}`;\n    else if (t1 === 0x4) assemblyLine.innerText += `SNE V${x}, ${kk}`;\n    else if (t1 === 0x5 && t4 === 0x0) assemblyLine.innerText += `SE V${x}, V${y}`;\n    else if (t1 === 0x6) assemblyLine.innerText += `LD V${x}, ${kk}`;\n    else if (t1 === 0x7) assemblyLine.innerText += `ADD V${x}, ${kk}`;\n    else if (t1 === 0x8 && t4 === 0x0) assemblyLine.innerText += `LD V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0x1) assemblyLine.innerText += `OR V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0x2) assemblyLine.innerText += `AND V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0x3) assemblyLine.innerText += `XOR V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0x4) assemblyLine.innerText += `ADD V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0x5) assemblyLine.innerText += `SUB V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0x6) assemblyLine.innerText += `SHR V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0x7) assemblyLine.innerText += `SUBN V${x}, V${y}`;\n    else if (t1 === 0x8 && t4 === 0xe) assemblyLine.innerText += `SHL V${x}, V${y}`;\n    else if (t1 === 0x9 && t4 === 0x0) assemblyLine.innerText += `SNE V${x}, V${y}`;\n    else if (t1 === 0xa) assemblyLine.innerText += `LD I, ${nnn}`;\n    else if (t1 === 0xb) assemblyLine.innerText += `JP V0, ${nnn}`;\n    else if (t1 === 0xc) assemblyLine.innerText += `RNG V${x}, ${kk}`;\n    else if (t1 === 0xd) assemblyLine.innerText += `DRW V${x}, V${y}, ${n}`;\n    else if (t1 === 0xe && t3 === 0x9 && t4 === 0xe) assemblyLine.innerText += `SKP V${x}`;\n    else if (t1 === 0xe && t3 === 0xa && t4 === 0x1) assemblyLine.innerText += `SKNP V${x}`;\n    else if (t1 === 0xf && t3 === 0x0 && t4 === 0x7) assemblyLine.innerText += `LD V${x}, DT`;\n    else if (t1 === 0xf && t3 === 0x0 && t4 === 0xa) assemblyLine.innerText += `LD V${x}, K`;\n    else if (t1 === 0xf && t3 === 0x1 && t4 === 0x5) assemblyLine.innerText += `LD DT, V${x}`;\n    else if (t1 === 0xf && t3 === 0x1 && t4 === 0x8) assemblyLine.innerText += `LD ST, V${x}`;\n    else if (t1 === 0xf && t3 === 0x1 && t4 === 0xe) assemblyLine.innerText += `ADD I, V${x}`;\n    else if (t1 === 0xf && t3 === 0x2 && t4 === 0x9) assemblyLine.innerText += `LD F, V${x}`;\n    else if (t1 === 0xf && t3 === 0x3 && t4 === 0x0) assemblyLine.innerText += `LD HF, V${x}`;\n    else if (t1 === 0xf && t3 === 0x3 && t4 === 0x3) assemblyLine.innerText += `LD B, V${x}`;\n    else if (t1 === 0xf && t3 === 0x5 && t4 === 0x5) assemblyLine.innerText += `LD [I], V${x}`;\n    else if (t1 === 0xf && t3 === 0x6 && t4 === 0x5) assemblyLine.innerText += `LD V${x}, [I]`;\n    else if (t1 === 0xf && t3 === 0x7 && t4 === 0x5) assemblyLine.innerText += `LD R, V${x}`;\n    else if (t1 === 0xf && t3 === 0x8 && t4 === 0x5) assemblyLine.innerText += `LD V${x}, R`;\n    else assemblyLine.innerText += `${opcode}`;\n\n    assemblyLines.push(assemblyLine);\n    assemblyCode.appendChild(assemblyLine);\n  }\n};\n\nconst updateAssemblyCode = () => {\n  assemblyLines[Math.round((chip8.program_counter() - 0x200) / 2)].scrollIntoView(true);\n};\n\nconst updateRegisters = () => {\n  const registerValues = new Uint8Array(chipo_chipo_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, chip8.registers(), REGISTER_COUNT - 2);\n  for (let i = 0; i < REGISTER_COUNT; i += 1) {\n    const register = registers[i];\n    if (i === 0) {\n      register.innerText = `PC: ${`  ${chip8.program_counter()}`.slice(-3)}`;\n    } else if (i === 1) {\n      register.innerText = ` I: ${`  ${chip8.index()}`.slice(-3)}`;\n    } else {\n      register.innerText = `${` ${i - 1}`.slice(-2)}: ${`  ${registerValues[i - 2]}`.slice(-3)}`;\n    }\n  }\n};\n\nconst drawScreen = () => {\n  const screenPtr = chip8.screen();\n  const screen = new Uint8Array(\n    chipo_chipo_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n    screenPtr,\n    (MAX_SCREEN_WIDTH * MAX_SCREEN_HEIGHT) / 8,\n  );\n\n  ctx.beginPath();\n\n  const isSuper = chip8.screen_height() === MAX_SCREEN_HEIGHT;\n  const pixelSize = (canvas.width / MAX_SCREEN_WIDTH) * (isSuper ? 1 : 2);\n\n  ctx.fillStyle = '#000000';\n  const height = chip8.screen_height();\n  const width = chip8.screen_width();\n  for (let row = 0; row < height; row += 1) {\n    for (let col = 0; col < width; col += 1) {\n      const index = row * width + col;\n      const byteIndex = Math.floor(index / 8);\n      const bitIndex = index % 8;\n      if ((screen[byteIndex] & (1 << bitIndex)) !== 0) {\n        ctx.fillRect(col * pixelSize, row * pixelSize, pixelSize, pixelSize);\n      }\n    }\n  }\n\n  ctx.fillStyle = '#FFFFFF';\n  for (let row = 0; row < chip8.screen_height(); row += 1) {\n    for (let col = 0; col < chip8.screen_width(); col += 1) {\n      const index = row * chip8.screen_width() + col;\n      const byteIndex = Math.floor(index / 8);\n      const bitIndex = index % 8;\n      if ((screen[byteIndex] & (1 << bitIndex)) === 0) {\n        ctx.fillRect(col * pixelSize, row * pixelSize, pixelSize, pixelSize);\n      }\n    }\n  }\n\n  ctx.closePath();\n};\n\nconst updateUi = () => {\n  updateAssemblyCode();\n  updateRegisters();\n  if (chip8.should_draw()) {\n    drawScreen();\n  }\n  if (chip8.should_beep()) {\n    playBeep();\n  }\n};\n\nconst render = () => {\n  if (isRunning) {\n    for (let i = 0; i < CYCLES_PER_FRAME; i += 1) {\n      chip8.execute_cycle();\n      if (chip8.should_draw()) {\n        break;\n      }\n    }\n    chip8.decrement_timers();\n    updateUi();\n    window.requestAnimationFrame(render);\n  }\n};\n\nconst startButton = document.getElementById('start-button');\nconst stopButton = document.getElementById('stop-button');\nconst stepButton = document.getElementById('step-button');\nconst romList = document.getElementById('rom-list');\nconst loadButton = document.getElementById('load-button');\nstartButton.disabled = true;\nstopButton.disabled = true;\nstepButton.disabled = true;\n\nROMS.forEach((romName) => {\n  const romOption = document.createElement('option');\n  romOption.value = romName;\n  romOption.text = romName;\n  romList.add(romOption);\n});\n\nconst start = () => {\n  startButton.disabled = true;\n  stepButton.disabled = true;\n  stopButton.disabled = false;\n\n  isRunning = true;\n  render();\n};\n\nconst stop = () => {\n  stopButton.disabled = true;\n  startButton.disabled = false;\n  stepButton.disabled = false;\n\n  isRunning = false;\n};\n\nconst step = () => {\n  chip8.execute_cycle();\n  chip8.decrement_timers();\n  updateUi();\n};\n\nconst load = () => {\n  stop();\n\n  currRomName = romList.options[romList.selectedIndex].value;\n  fetch(`assets/roms/${currRomName}`)\n    .then((response) => response.arrayBuffer())\n    .then((buffer) => {\n      const machineCode = new Uint8Array(buffer);\n\n      // Blitz expects that off screen sprites are clipped\n      chip8.load_rom(machineCode, currRomName !== 'BLITZ');\n\n      // Blitz has most of its instructions on odd program counter values\n      disassembleMachineCode(machineCode, currRomName !== 'BLITZ');\n      updateRegisters();\n    });\n};\n\nstartButton.addEventListener('click', start);\nstopButton.addEventListener('click', stop);\nstepButton.addEventListener('click', step);\nloadButton.addEventListener('click', load);\n\nupdateRegisters();\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/styles.scss":
/*!*************************!*\
  !*** ./src/styles.scss ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../node_modules/css-loader!../node_modules/sass-loader/dist/cjs.js!./styles.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./src/styles.scss\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./src/styles.scss?");

/***/ })

}]);